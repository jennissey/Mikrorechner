$date
  Thu Jan 15 02:02:50 2015
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 1 ! clk $end
$var reg 1 " nrst $end
$var reg 1 # const0 $end
$var reg 1 $ const1 $end
$var reg 1 % dnwe $end
$var reg 1 & dnoe $end
$var reg 32 ' iaddr[31:0] $end
$var reg 32 ( daddr[31:0] $end
$var reg 32 ) idata[31:0] $end
$var reg 32 * ddata[31:0] $end
$comment ictrl is not handled $end
$comment dctrl is not handled $end
$var reg 32 + data[31:0] $end
$var reg 32 , memdata[31:0] $end
$var reg 32 - memadress[31:0] $end
$var reg 32 . pcout[31:0] $end
$var reg 32 / dbus[31:0] $end
$var reg 8 0 iaddr2[7:0] $end
$var reg 8 1 daddr2[7:0] $end
$scope module instmemi $end
$var reg 1 2 ncs $end
$var reg 1 3 nwe $end
$var reg 1 4 noe $end
$var reg 8 5 addr[7:0] $end
$var reg 32 6 data[31:0] $end
$comment fileio is not handled $end
$upscope $end
$scope module datamemi $end
$var reg 1 7 ncs $end
$var reg 1 8 nwe $end
$var reg 1 9 noe $end
$var reg 8 : addr[7:0] $end
$var reg 32 ; data[31:0] $end
$comment fileio is not handled $end
$upscope $end
$scope module pipeproci $end
$var reg 1 < clk $end
$var reg 1 = nres $end
$var reg 32 > ir[31:0] $end
$var reg 32 ? data[31:0] $end
$var reg 32 @ memaddress[31:0] $end
$var reg 32 A memdata[31:0] $end
$var reg 32 B pcout[31:0] $end
$var reg 1 C dnwe $end
$var reg 1 D dnoe $end
$var reg 32 E if_ir[31:0] $end
$var reg 32 F if_pc[31:0] $end
$var reg 32 G pcvalue[31:0] $end
$var reg 32 H pcvaluenew[31:0] $end
$var reg 32 I pcr[31:0] $end
$var reg 32 J id_pc[31:0] $end
$var reg 32 K id_ir[31:0] $end
$var reg 32 L id_opa[31:0] $end
$var reg 32 M id_opb[31:0] $end
$var reg 32 N id_memadress[31:0] $end
$var reg 5 O r1[4:0] $end
$var reg 5 P r2[4:0] $end
$var reg 5 Q r3[4:0] $end
$var reg 32 R ex_ir[31:0] $end
$var reg 32 S ex_pc[31:0] $end
$var reg 32 T ex_memadress[31:0] $end
$var reg 32 U ex_alu[31:0] $end
$var reg 32 V ex_opa[31:0] $end
$var reg 32 W aluout[31:0] $end
$var reg 1 X ex_flag $end
$var reg 1 Y registerflag $end
$var reg 32 Z mem_ir[31:0] $end
$var reg 32 [ mem_alu[31:0] $end
$var reg 32 \ mem_data[31:0] $end
$var reg 32 ] registerwritedata[31:0] $end
$var reg 32 ^ opa[31:0] $end
$var reg 32 _ opb[31:0] $end
$var reg 1 ` writeenable $end
$var reg 32 a r2value[31:0] $end
$var reg 32 b r3value[31:0] $end
$scope module rf1 $end
$var reg 1 c clk $end
$var reg 1 d nres $end
$var reg 5 e r2[4:0] $end
$var reg 5 f r3[4:0] $end
$var reg 5 g r1[4:0] $end
$var reg 32 h data[31:0] $end
$var reg 32 i pcr[31:0] $end
$var reg 1 j writeenable $end
$var reg 32 k r2value[31:0] $end
$var reg 32 l r3value[31:0] $end
$var reg 32 m pcvalue[31:0] $end
$comment registers is not handled $end
$upscope $end
$scope module alu1 $end
$var reg 32 n opa[31:0] $end
$var reg 32 o opb[31:0] $end
$var reg 6 p opcode[5:0] $end
$var reg 32 q aluout[31:0] $end
$var reg 1 r aluflagout $end
$var reg 32 s opaunsigned[31:0] $end
$var reg 32 t opbunsigned[31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
0!
0"
0#
1$
U%
U&
b00000000000000000000000000000000 '
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU (
b00000000000000000000000000001111 )
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU *
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU +
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU ,
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU -
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU .
bZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ /
b00000000 0
bUUUUUUUU 1
02
13
04
b?